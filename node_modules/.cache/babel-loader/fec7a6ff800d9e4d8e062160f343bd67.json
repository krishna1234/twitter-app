{"ast":null,"code":"var _jsxFileName = \"/Users/ks071866/Documents/learning/twitter-app/src/Home.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport PostsList from \"./PostsList\";\nimport { withRouter } from 'react-router';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchPosts = async () => {\n      this.setState({\n        isLoading: true\n      });\n\n      try {\n        const result = await fetch(\"https://aravindtwitter.herokuapp.com/twittersearch?\".concat(this.state.rawQuery || this.props.q), {});\n        let response = await result.json();\n        this.setState({\n          posts: response.statuses,\n          isLoading: false,\n          hasError: false\n        });\n        this.intervalID = setTimeout(this.fetchPosts.bind(this), 27000);\n      } catch (error) {\n        this.setState({\n          isLoading: false,\n          hasError: true\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        query: event.target.value\n      });\n    };\n\n    this.submitSearch = (_event, query) => {\n      this.setState({\n        rawQuery: \"key=\".concat(query)\n      }, this.reRender);\n    };\n\n    this.reRender = () => {\n      this.props.history.push(this.state.rawQuery);\n    };\n\n    this.state = {\n      rawQuery: \"\",\n      query: \"\",\n      posts: [],\n      isLoading: false,\n      hasError: false\n    };\n  }\n\n  componentDidMount() {\n    let value = this.props.q;\n    this.fetchPosts(value);\n  }\n\n  render() {\n    const _this$state = this.state,\n          query = _this$state.query,\n          posts = _this$state.posts,\n          isLoading = _this$state.isLoading,\n          hasError = _this$state.hasError;\n    let inputValue = query || this.props.q.split(\"=\")[1];\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"search @twitter\"), React.createElement(\"span\", {\n      className: \"autorefresh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Auto refresh in 27 seconds\")), React.createElement(\"hr\", {\n      className: \"bottom-hr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"form-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: event => this.handleChange(event),\n      placeholder: \"search...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: event => this.submitSearch(event, query),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"SEARCH\")), hasError && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Oh no! Something wrong... :(\"), isLoading ? React.createElement(\"div\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Loading...\") : React.createElement(PostsList, {\n      list: posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(Home);","map":{"version":3,"sources":["/Users/ks071866/Documents/learning/twitter-app/src/Home.js"],"names":["React","PostsList","withRouter","Home","Component","constructor","props","fetchPosts","setState","isLoading","result","fetch","state","rawQuery","q","response","json","posts","statuses","hasError","intervalID","setTimeout","bind","error","handleChange","event","query","target","value","submitSearch","_event","reRender","history","push","componentDidMount","render","inputValue","split"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport PostsList from \"./PostsList\";\nimport { withRouter } from 'react-router'\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawQuery: \"\",\n            query: \"\",\n            posts: [],\n            isLoading: false,\n            hasError: false\n        }\n    }\n\n    componentDidMount() {\n        let value = this.props.q;\n        this.fetchPosts(value);             \n    }    \n\n    fetchPosts = async () => {\n        this.setState({\n            isLoading: true\n        })\n        try {                  \n            const result = await fetch(`https://aravindtwitter.herokuapp.com/twittersearch?${this.state.rawQuery || this.props.q}`, {           \n            });                    \n            let response = await result.json();            \n            this.setState({\n                posts: response.statuses,\n                isLoading: false,\n                hasError: false\n            })            \n            this.intervalID = setTimeout(this.fetchPosts.bind(this), 27000);\n            \n        } \n        catch (error) {\n            this.setState({\n                isLoading: false,\n                hasError: true\n            })\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            query:  event.target.value\n        })\n    }\n\n    submitSearch = (_event, query) => {\n        this.setState({\n            rawQuery: `key=${query}`\n        }, this.reRender)\n    }\n\n    reRender = () => {\n        this.props.history.push(this.state.rawQuery);\n    }\n\n    render() {\n        const { query, posts, isLoading, hasError } = this.state;\n        let inputValue = query || this.props.q.split(\"=\")[1];\n        return(\n            <div className=\"container\">            \n                <div className=\"heading-div\">\n                    <span className=\"heading\">search @twitter</span>\n                    <span className=\"autorefresh\">Auto refresh in 27 seconds</span>                    \n                </div>\n                <hr className=\"bottom-hr\" />\n                <form className=\"form-div\">\n                    <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={event => this.handleChange(event)}\n                    placeholder=\"search...\"\n                    />\n                    <button onClick={event => this.submitSearch(event, query)} type=\"submit\">\n                    {/* <i className=\"fas fa-search\"></i> */}\n                        SEARCH\n                    </button>\n                </form>      \n                {hasError && <div className=\"error\">Oh no! Something wrong... :(</div>}\n                {isLoading ? (\n                    <div className=\"loading\">Loading...</div>\n                ) : (\n                    <PostsList list={posts} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Home)\n"]},"metadata":{},"sourceType":"module"}