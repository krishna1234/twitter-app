{"version":3,"sources":["PostsList.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["PostsList","list","className","length","map","post","key","id","src","user","profile_image_url","alt","name","screen_name","created_at","text","defaultProps","Home","props","fetchPosts","a","setState","isLoading","fetch","state","rawQuery","q","result","json","response","posts","statuses","hasError","intervalID","setTimeout","bind","handleChange","event","query","target","value","submitSearch","_event","reRender","history","push","this","inputValue","split","type","onChange","placeholder","onClick","React","Component","withRouter","App","path","component","match","params","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dab59796.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst PostsList = ({ list }) => {\n  return (        \n    <div className=\"card-wrapper\">        \n        {list.length !== 0 ? \n          list.map((post) => {\n            return (                \n                  <div key={post.id}>                      \n                      <div className=\"post-container\">    \n                        <div className=\"post-thumb\">\n                          <img src={post.user.profile_image_url} alt={post.user.profile_image_url} />\n                        </div>\n                        <span className=\"post-title\">{post.user.name}</span>\n                        <span className=\"post-title\">@{post.user.screen_name}</span>\n                        <span className=\"post-title post-date\">{post.created_at}</span>\n                        <div className=\"post-content\">\n                            <p>{post.text}</p>\n                        </div>\n                      </div>\n                    </div>\n                );\n            })\n          : \n          <h4 className=\"no_results\">No Results Found</h4>\n        }\n           \n    </div>          \n  );\n};\n\nPostsList.propTypes = {\n  list: PropTypes.array.isRequired\n};\n\nPostsList.defaultProps = {\n  list: []\n};\n\nexport default PostsList;\n","import React from \"react\";\nimport \"./App.css\";\nimport PostsList from \"./PostsList\";\nimport { withRouter } from 'react-router'\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawQuery: \"\",\n            query: \"\",\n            posts: [],\n            isLoading: false,\n            hasError: false\n        }\n    }\n\n    componentDidMount() {\n        let value = this.props.q;\n        this.fetchPosts(value);             \n    }    \n\n    fetchPosts = async () => {\n        this.setState({\n            isLoading: true\n        })\n        try {                  \n            const result = await fetch(`https://aravindtwitter.herokuapp.com/twittersearch?${this.state.rawQuery || this.props.q}`, {           \n            });                    \n            let response = await result.json();            \n            this.setState({\n                posts: response.statuses,\n                isLoading: false,\n                hasError: false\n            })            \n            this.intervalID = setTimeout(this.fetchPosts.bind(this), 27000);\n            \n        } \n        catch (error) {\n            this.setState({\n                isLoading: false,\n                hasError: true\n            })\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            query:  event.target.value\n        })\n    }\n\n    submitSearch = (_event, query) => {\n        this.setState({\n            rawQuery: `key=${query}`\n        }, this.reRender)\n    }\n\n    reRender = () => {\n        this.props.history.push(this.state.rawQuery);\n    }\n\n    render() {\n        const { query, posts, isLoading, hasError } = this.state;\n        let inputValue = query || this.props.q.split(\"=\")[1];\n        return(\n            <div className=\"container\">            \n                <div className=\"heading-div\">\n                    <span className=\"heading\">search @twitter</span>\n                    <span className=\"autorefresh\">Auto refresh in 27 seconds</span>                    \n                </div>\n                <hr className=\"bottom-hr\" />\n                <form className=\"form-div\">\n                    <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={event => this.handleChange(event)}\n                    placeholder=\"search...\"\n                    />\n                    <button onClick={event => this.submitSearch(event, query)} type=\"submit\">\n                    {/* <i className=\"fas fa-search\"></i> */}\n                        SEARCH\n                    </button>\n                </form>      \n                {hasError && <div className=\"error\">Oh no! Something wrong... :(</div>}\n                {isLoading ? (\n                    <div className=\"loading\">Loading...</div>\n                ) : (\n                    <PostsList list={posts} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Home)\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  render() {\n    return(\n      <Router>      \n        <Switch>\n        <Route path=\"/:q?\" component={({ match }) => (\n          <Home q={match.params.q} />\n        )}/>\n        </Switch>      \n    </Router>      \n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}